[{"/home/olga/www/it-incubator/js-lections/src/index.tsx":"1","/home/olga/www/it-incubator/js-lections/src/redux/currencyReducer.ts":"2","/home/olga/www/it-incubator/js-lections/src/containers/CurrencyExchangeContainer/CurrencyEContainer.tsx":"3","/home/olga/www/it-incubator/js-lections/src/components/CurrencyExchange/CurrencyExchange.tsx":"4","/home/olga/www/it-incubator/js-lections/src/redux/actions.ts":"5","/home/olga/www/it-incubator/js-lections/src/lessons/lesson2/lesson2.ts":"6"},{"size":319,"mtime":1609752860000,"results":"7","hashOfConfig":"8"},{"size":1374,"mtime":1629712932493,"results":"9","hashOfConfig":"8"},{"size":3887,"mtime":1629713467420,"results":"10","hashOfConfig":"8"},{"size":3154,"mtime":1629711749362,"results":"11","hashOfConfig":"8"},{"size":1415,"mtime":1629800349436,"results":"12","hashOfConfig":"8"},{"size":7768,"mtime":1630481228012,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"h05tb6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/olga/www/it-incubator/js-lections/src/index.tsx",[],["28","29"],"/home/olga/www/it-incubator/js-lections/src/redux/currencyReducer.ts",[],"/home/olga/www/it-incubator/js-lections/src/containers/CurrencyExchangeContainer/CurrencyEContainer.tsx",["30","31"],"import React, {Dispatch} from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC, CurrencyReducersTypes,\r\n} from '../../redux/actions';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\nimport {IGlobalState} from \"../../redux/state\";\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    /* props with CONNECT\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        ChangeCurrencyFieldAC,\r\n        ChangeActionAC,\r\n        ChangeCurrentCurrencyAC,\r\n    } = props;*/\r\n\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n    } = useSelector<IGlobalState, CurrencyState>(state => state.currency)\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>()\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n//with CONNECT\r\n/*const mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n    return {\r\n        currencies: currency.currencies,\r\n        currentCurrency: currency.currentCurrency,\r\n        isBuying: currency.isBuying,\r\n        amountOfBYN: currency.amountOfBYN,\r\n        amountOfCurrency: currency.amountOfCurrency,\r\n    };\r\n};\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    ChangeCurrencyFieldAC,\r\n    ChangeActionAC,\r\n    ChangeCurrentCurrencyAC,\r\n});\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(CurrencyEContainer);*/\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","/home/olga/www/it-incubator/js-lections/src/components/CurrencyExchange/CurrencyExchange.tsx",[],"/home/olga/www/it-incubator/js-lections/src/redux/actions.ts",[],"/home/olga/www/it-incubator/js-lections/src/lessons/lesson2/lesson2.ts",["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":9,"column":9,"nodeType":"40","messageId":"41","endLine":9,"endColumn":16},{"ruleId":"38","severity":1,"message":"42","line":9,"column":18,"nodeType":"40","messageId":"41","endLine":9,"endColumn":32},{"ruleId":"43","severity":1,"message":"44","line":3,"column":1,"nodeType":"45","endLine":3,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":128,"column":14,"nodeType":"48","messageId":"49","endLine":128,"endColumn":16},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'ConnectedProps' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]